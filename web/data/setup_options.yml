---
# This file is generated from source code comments.
scopes:
  vanilla:
    documentation: Setup scope when setup is invoked without an application argument.
    gem: nii-core
  locale:
    documentation: Setup scope inside an `on` block.
    gem: nii-core
  domain:
    documentation: Setup scope inside a `domain` setup block.
    gem: nii-core
  middleware:
    documentation: Setup scope for Nii::Middleware.
    gem: nii-core
  global:
    documentation: Setup scope for Nii::Global and other Nii::Shared instances.
    gem: nii-global
  i18n:
    documentation: Setup scope for Ruby I18n.
    gem: nii-i18n
  rails:
    documentation: Setup scope for Rails applications and engines.
    gem: nii-rails
  sinatra:
    documentation: Setup scope for Sinatra applications.
    gem: nii-sinatra
methods:
- name: auto_fallbacks
  aliases: []
  default: 'false'
  documentation: |-
    Lets Nii dynamically determine the fallback locale based on user preferences.

    If this is enabled, the client's locale preference, which is typically based on the
    Accept-Language header for web applications, is used not only to determine the best
    locale to use, but also its fallback locale.

    Ruby I18m gives us a few examples in their documentation:
    > "People speaking Arabian as spoken in Palestine also speak Hebrew as spoken in Israel. […]
    > People speaking Sami as spoken in Finland also speak Swedish and Finnish as spoken in Finland."
    > – Ruby I18n fallback documentation

    This setting lets you implement exactly this feature, but instead of making assumptions about
    a user's language knowledge, it lets the user tell us what languages would be acceptable options.
    This preference is most commonly configured via or determined by the operating system or web browser.
    The user does not have to configure this for your application specifically.

    We do not recommend making assumptions about the user's language knowledge, unless you have an extremely
    high certainty (like setting Swiss Standard German as a fallback for Swiss German, or assuming your audience
    speaks English when providing content for software developers).
  example: |-
    setup = Nii::Setup.new do
      available_locales "en", "de", "fr"
      auto_fallbacks
    end

    # this part is automatically handled by Nii::Middleware
    # and only used for illustration
    accept_language = "gsw-CH, de-CH, fr-CH, en"
    context         = Nii::Context.new(accept_language, setup)

    # gsw-CH gets filtered out, as it isn't supported
    context.locale           # => #<Nii::Locale:de-CH>
    context.fallback_locales # => [#<Nii::Locale:fr-CH>, #<Nii::Locale:en>]
  scopes:
  - vanilla
  - locale
  - domain
  - middleware
  - global
  - i18n
  - rails
  - sinatra
  summary: Lets Nii dynamically determine the fallback locale based on user preferences.
- name: available_locales
  aliases:
  - locales
  documentation: |-
    Limits the locales that are acceptable outcomes for locale negotiation.

    Sub-locales will still be accepted (ie, if `en` is in the list of available locales,
    a client may still ask for `en-US`). This option is ignored if a locale is set explicitly.
  example: |-
    Nii::Setup.new do
      available_locales "de", "en"
    end
  scopes: &3
  - vanilla
  - domain
  - middleware
  - global
  - i18n
  - rails
  - sinatra
  summary: Limits the locales that are acceptable outcomes for locale negotiation.
- name: data
  aliases: []
  default: Nii::DATA
  documentation: |-
    Allows replacing the backend for loading CLDR data.

    Primarily for internal purposes, like testing.
    May be useful in the future if the CLDR data should be upgraded/downgraded separately.
  example: |-
    Nii::Setup.new do |config|
      config.data = Nii::Data.new "path/to/data"
    end
  scopes:
  - vanilla
  - middleware
  - global
  - i18n
  - rails
  - sinatra
  summary: Allows replacing the backend for loading CLDR data.
- name: data_locale
  aliases: []
  documentation: |-
    Overrides the locale ID used for looking up CLDR data.

    This setting will not impact message lookup, and may lead to unexpected
    consequences if the messages are written in a different script than
    correspond to the data locale (like when setting Arabic as the data locale
    for English).

    The most common use case is to support a custom locale identifier you invented
    yourself. Though you might be better of using a variant instead (if you use
    `en-pirate` instead of `pirate` Nii will automatically pick "en" as data locale).
  example: |-
    setup = Nii::Setup.new do
      on(language: "en") { data_locale "fr" }
    end

    # Nii will now use "fr" to look up data in the CLDR
    context = Nii::Context.new("en-US", setup)
    context.format "US", as: :region # => "États-Unis"
  scopes:
  - locale
  summary: Overrides the locale ID used for looking up CLDR data.
- name: default_namespace
  aliases:
  - namespace
  documentation: Alias for namespace.
  scopes: &4
  - vanilla
  - locale
  - domain
  - middleware
  - global
  - i18n
  - rails
  - sinatra
  summary: Alias for namespace.
  alias_for: namespace
- name: domain
  aliases: []
  documentation: |-
    Allows for domain specific setup.
    If patterns are used, multiple configurations may apply to a single domain (they are matched in definition order).
  example: |-
    Nii::Setup.new MyApp do
      # applies to all .de domains
      domain(/\.de$/) { locale "de-DE" }

      # applies in addition to the block above
      domain("beispiel.de") { namespace "example" }
    end
  scopes:
  - middleware
  - rails
  - sinatra
  summary: Allows for domain specific setup.
- name: encoding
  aliases: []
  default: UTF-8
  documentation: |-
    Sets the encoding used for formatting strings.
    It is recommended to only use Unicode based encodings, as many features (including bi-directional text and collation)
    might not be available otherwise.
  example: |-
    Nii::Setup.new MyApp do
      encoding "UTF-16"
    end
  scopes:
  - vanilla
  - locale
  - domain
  - middleware
  - global
  - i18n
  - rails
  - sinatra
  summary: Sets the encoding used for formatting strings.
- name: env_key
  aliases: []
  default: nii.context
  documentation: |-
    The Rack environment key to store the context instance under.
    Changing this setting allows you to have more than one context per request.
  scopes:
  - middleware
  - rails
  - sinatra
  summary: The Rack environment key to store the context instance under.
- name: fallback_locale
  aliases:
  - fallback_locales
  documentation: Alias for fallback_locales.
  scopes: &1
  - vanilla
  - locale
  - domain
  - middleware
  - global
  - i18n
  - rails
  - sinatra
  summary: Alias for fallback_locales.
  alias_for: fallback_locales
- name: fallback_locales
  aliases:
  - fallback_locale
  documentation: |-
    Defines a fallback locale. It is used for message lookup if a message isn't defined for the current locale.

    This is different from inheritance: `fr-Latn-CH` will automatically inherit messages from `fr-CH`,
    `fr-Latn`, and `fr`.

    This option can be used to immitade Ruby I18n's `fallback` and `default_locale` settings.
    It is very flexible in combination with `on`, `setup`, and `domain`.
  example: |-
    Nii::Setup.new do
      # set fallback for all locales to American English
      fallback_locale "en-US"

      # set fallback locale for Norwegian Nynorsk
      # to Norwegian Bokmål and EU English
      on language: "nn" do
        fallback_locales "nb", "en-150"
      end
    end
  scopes: *1
  summary: Defines a fallback locale.
- name: filter_fallbacks
  aliases: []
  default: 'false'
  documentation: |-
    This option will cause fallbacks to be filtered based on user preference.

    It is similar to {#auto_fallbacks}, but will only choose fallbacks from the pre-defined
    fallback locales, and also maintain the configuration order.
  scopes:
  - vanilla
  - locale
  - domain
  - middleware
  - global
  - i18n
  - rails
  - sinatra
  summary: This option will cause fallbacks to be filtered based on user preference.
- name: ignore_path
  aliases:
  - ignore_paths
  documentation: Alias for ignore_paths.
  scopes: &2
  - domain
  - middleware
  - rails
  - sinatra
  summary: Alias for ignore_paths.
  alias_for: ignore_paths
- name: ignore_paths
  aliases:
  - ignore_path
  documentation: |-
    Tells Nii to not handle requests to a given path.

    Requests for these paths are exempt form features like locale_path, and also will not trigger locale negotiation.
    Calling this method multiple times will add paths to the list, rather than override previous values.
  example: |-
    Nii::Setup.new MyApp do
      ignore_paths "/application.css", "/application.js"
    end
  scopes: *2
  summary: Tells Nii to not handle requests to a given path.
- name: insert_after
  aliases: []
  documentation: |-
    Sets insertion point for middleware before a certain other middleware.
    Useful to make sure the Nii context is created before some other logic is triggered,
    that might depend on localization being available.

    By default the specific framework implementation will determine the best place
    to insert the middleware.
  scopes:
  - middleware
  summary: Sets insertion point for middleware before a certain other middleware.
- name: insert_before
  aliases: []
  documentation: |-
    Sets insertion point for middleware after a certain other middleware.
    Useful to make sure the Nii context is created after some other logic is triggered,
    that might be required to properly determine the locale.

    By default the specific framework implementation will determine the best place
    to insert the middleware.
  scopes:
  - middleware
  summary: Sets insertion point for middleware after a certain other middleware.
- name: language_header
  aliases: []
  default: 'true'
  documentation: |-
    Sets or enables/disables the HTTP request header to use for locale negotiation.

    * false: disable header based locale negotiation.
    * true or no value: enable header based locale negotiation with the default header (Accept-Language)
    * A String: use an alternative header.

    Note that other locale determining settings (like locale_path or a fixed locale)
    take precedence over the header value.
  example: |-
    Nii::Setup.new MyAPI do
      # use the non-standard X-Language header instead
      language_header "X-Language"
    end
  scopes:
  - middleware
  - rails
  - sinatra
  summary: Sets or enables/disables the HTTP request header to use for locale negotiation.
- name: locale
  aliases: []
  documentation: |-
    Sets a fixed locale, skipping any locale negotiation.
    Useful if locales are solely determined by domain.
  example: |-
    Nii::Setup.new MyApp do
      domain("example.com") { locale "en-US" }
      domain("beispiel.de") { locale "de-DE" }
    end
  scopes:
  - domain
  summary: Sets a fixed locale, skipping any locale negotiation.
- name: locale_path
  aliases: []
  default: 'false'
  documentation: |-
    If enabled, Nii::Middleware will parse the locale from the given path.
    If {#available_locales} are defined, it will only accept these values as valid path segments.
  example: |-
    Nii::Setup.new MyApp do
      # Requests to "/en/home" will be translated to "/home" with locale set to "en"
      # Requests to "/" will redirect to "/en/" or "/de/" based on the user's language setting.
      available_locales "de", "en"
      locale_path

      # disable locale path for beispiel.de and set locale to "de"
      domain "beispiel.de" do
        locale_path false
        locale "de"
      end
    end
  scopes:
  - domain
  - middleware
  - rails
  - sinatra
  summary: If enabled, Nii::Middleware will parse the locale from the given path.
- name: locales
  aliases:
  - available_locales
  documentation: Alias for available_locales.
  scopes: *3
  summary: Alias for available_locales.
  alias_for: available_locales
- name: measurement_system
  aliases: []
  documentation: Overrides the measurement system. Valid values are `US`, `UK`, and
    `metric`.
  example: |-
    Nii::Setup.new do
      on(territory: 'GB') { measurement_system "metric" }
    end
  scopes:
  - vanilla
  - locale
  - domain
  - middleware
  - global
  - i18n
  - rails
  - sinatra
  summary: Overrides the measurement system.
- name: namespace
  aliases:
  - default_namespace
  documentation: Sets the default namespace to be used for `find_message` (and thus
    `render`).
  example: |-
    Nii::Setup.new MyApp do
      domain "www.my-page.com" do
        namespace "web"
      end

      domain "admin.my-page.com" do
        namespace "web/admin"
      end
    end
  scopes: *4
  summary: Sets the default namespace to be used for `find_message` (and thus `render`).
- name: numbering_system
  aliases:
  - numbers
  default: default
  documentation: |-
    The default numbering system to use for formatting numbers.

    This can be set to a numbering system identifier (like `latn` or `arab`),
    or one of the placeholder names `default`, `native`, `traditional`, and `finance`,
    in which case Nii will pick the most appropriate numbering system for each locale.
  example: |-
    Nii::Setup.new do
      # enable traditional numbers for languages that support it (like Chinese)
      numbering_system "traditional"

      on "la" do
        # use Roman numerals for Latin
        numbering_system "roman"
      end
    end
  scopes: &5
  - vanilla
  - locale
  - domain
  - middleware
  - global
  - i18n
  - rails
  - sinatra
  summary: The default numbering system to use for formatting numbers.
- name: numbers
  aliases:
  - numbering_system
  default: default
  documentation: Alias for numbering_system.
  scopes: *5
  summary: Alias for numbering_system.
  alias_for: numbering_system
- name: 'on'
  aliases: []
  documentation: Create a new locale dependent scope.
  example: |-
    Nii::Setup.new do
      # you can pass locale identifiers
      on "de-CH", "de-AT" do
        # have Swiss Standard German and Austrian German
        # fall back to Standard German
        fallback_locale "de-DE"
      end

      # you can pass a hash with conditions
      on territory: "US" do
        currency "USD"
      end

      # you can also combine the two
      on "en", "es", territory: "US" do
        measurement_system "US"
      end

      # these can also be nested
      on "de" do
        # default to EUR for everything in German
        currency "EUR"
        # except in Switzerland
        on(territory: "CH") { currency "CHF" }
      end
    end
  scopes:
  - vanilla
  - locale
  - middleware
  - global
  - i18n
  - rails
  - sinatra
  summary: Create a new locale dependent scope.
- name: pattern_style
  aliases: []
  default: String
  documentation: |-
    Enables pattern matching for domain, locale_path, and ignore_path.
    Valid options include String, Regexp, as well as Mustermann pattern classes.

    The class set as argument needs to implement `===` (returning true or false) and
    `match` (returning a MatchData object).
  example: |-
    # Rails compatible route patterns
    require "mustermann/rails"
    Nii::Setup.new MyRailsApp do
      pattern_style Mustermann::Rails
      locale_path "/l/:locale/*path" # use /l/en instead of /en as locale prefix
      ignore_path "/assets/*path"    # ignore all requests to /assets/*
    end

    # Sinatra compatible route patterns
    require "mustermann/sinatra"
    Nii::Setup.new MySinatraApp do
      pattern_style Mustermann::Sinatra
      domain("*.de") { locale "de-DE" } # pattern_style also applies to domain
    end
  scopes:
  - middleware
  - rails
  - sinatra
  summary: Enables pattern matching for domain, locale_path, and ignore_path.
- name: reload_templates
  aliases: []
  default: 'false'
  documentation: |-
    Enables automatic message template reloading whenever localization files change.
    Framework integrations like nii-rails and nii-sinatra will typically set this
    option for you in development mode.
  example: |-
    Nii::Setup.new do
      reload_templates if ENV["RACK_ENV"] == "development"
    end
  scopes:
  - vanilla
  - locale
  - domain
  - middleware
  - global
  - i18n
  - rails
  - sinatra
  summary: Enables automatic message template reloading whenever localization files
    change.
- name: rounding_mode
  aliases: []
  default: halfeven
  documentation: |-
    The rounding mode to be used when formatting numbers.

    Available modes:

    * `halfeven` - Values exactly on the 0.5 (half) mark are rounded to the nearest even digit.
      This is often called Banker’s Rounding because it is, on average, free of bias.
      It is the default mode specified for IEEE 754 floating point operations, as well as the default used by Unicode/ICU.
    * `halfodd` – Similar to `halfeven`, but rounds ties to the nearest odd number instead of even number.
    * `halfdown` – Values exactly on the 0.5 (half) mark are rounded down (next smaller absolute value, towards zero).
    * `halfup` – Values exactly on the 0.5 (half) mark are rounded up (next larger absolute value, away from zero).
    * `down` – All values are rounded towards the next smaller absolute value (rounded towards zero). This is similar to Ruby's `to_i`.
    * `up` – All values are rounded towards the next greater absolute value (away from zero).
    * `halfceiling` – Values exactly on the 0.5 (half) mark are rounded toward positive infinity (+∞). This is the same as Ruby's `round` method.
    * `halffloor` – Values exactly on the 0.5 (half) mark are rounded towards negative infinity (-∞).
    * `ceiling` – All values are rounded towards positive infinity (+∞). This is the same as Ruby's `ceil` method.
    * `floor` - All values are rounded towards negative infinity (-∞). This is the same as Ruby's `floor` method.
    * `unnecessary` - The mode “Unnecessary” doesn’t perform any rounding, but instead returns an error if the value cannot be represented exactly without rounding.
  scopes:
  - vanilla
  - locale
  - domain
  - middleware
  - global
  - i18n
  - rails
  - sinatra
  summary: The rounding mode to be used when formatting numbers.
- name: setup
  aliases: []
  documentation: |-
    Applies the current setup to another application.
    Optionally takes a block for per-application customization.
  example: |-
    Nii::Setup.new MyApplication do
      setup I18n # also use this configuration as I18n backend.

      setup Nii::Middleware do
        # middleware specific congiguration
        insert_after Rack::Head
      end

      # this applies to all three (MyApplication, Nii::Middleware, and I18n)
      available_locales "en", "fr"
    end
  scopes:
  - everywhere
  summary: Applies the current setup to another application.
- name: sync_key
  aliases: []
  default: nii.sync
  documentation: |-
    The Rack environment key to store the synchronization context under.
    Used for synchronizing I18n.locale with the request's locale.
  scopes:
  - middleware
  - rails
  - sinatra
  summary: The Rack environment key to store the synchronization context under.
- name: territory
  aliases: []
  documentation: |-
    Overrides the territory.

    The territory is exposed via Context#territory and used to determine measurement system, calendar, currency, etc.

    Setting this option will not impact message lookup – it therefore works similar to the region override Unicode extension, except that it is
    set by the server instead of the client, and takes priority (it overrides the override).
  example: |-
    Nii::Setup.new MyApp do
      domain("beispiel.de") { territory "DE" }
      domain("beispiel.ch") { territory "CH" }
    end
  scopes:
  - vanilla
  - locale
  - domain
  - middleware
  - global
  - i18n
  - rails
  - sinatra
  summary: Overrides the territory.
- name: timezone
  aliases: []
  documentation: Overrides the timezone. Th timezone exposed via Context#timezone
    and used for date and time formatting.
  example: |-
    Nii::Setup.new do
      domain("web.co.uk") { timezone "Europe/London" }
    end
  scopes:
  - vanilla
  - locale
  - domain
  - middleware
  - global
  - i18n
  - rails
  - sinatra
  summary: Overrides the timezone.
- name: timezone_cookie
  aliases: []
  default: 'true'
  documentation: |-
    Sets or enables/disables the use of a timezone cookie.

    * false: disable cookie based timezone determination.
    * true or no value: enable cookie based timezone determination with the default cookie name (tz and browser_time_zone)
    * A String: use an alternative cookie name.

    Nii will not do anything server-site to set this cookie, but will happily use it to determine the timezone.
    It is recommended to set this cookie via JavaScript.

    The simplest way to determine the timezone in JavaScript is via ECMAScript Intl:

      var timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
  example: |-
    Nii::Setup.new MyAPI do
      # tell Nii to ignore any timezone cookie
      timezone_cookie false
    end
  scopes:
  - middleware
  - rails
  - sinatra
  summary: Sets or enables/disables the use of a timezone cookie.
- name: timezone_header
  aliases: []
  default: 'true'
  documentation: |-
    Sets or enables/disables the HTTP request header to use for timezone determination.

    * false: disable header based timezone determination.
    * true or no value: enable header based timezone determination with the default header (Timezone, Time-Zone, or TZ)
    * A String: use an alternative header.

    Note that browsers don't currently implement this feature, and the draft standard from 2011 hasn't gone
    beyond the proposal stage.
  example: |-
    Nii::Setup.new MyAPI do
      # use the X-Timezone header
      timezone_header "X-Timezone"
    end
  scopes:
  - middleware
  - rails
  - sinatra
  summary: Sets or enables/disables the HTTP request header to use for timezone determination.
